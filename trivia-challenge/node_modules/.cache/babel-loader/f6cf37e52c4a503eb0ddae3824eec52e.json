{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/bogdan_code/src/screens/QuestionaireScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useGetQuestionsByParamsQuery } from \"../store/getQuestionsApi\";\nimport { ResultScreen, Questionaire } from \"./index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionaireScreen = ({\n  difficultyValue,\n  amountValue\n}) => {\n  _s();\n\n  var _data$results;\n\n  const [questionsData, setQuestionsData] = useState([]);\n  const [resultQuestionsData, setResultQuestionsData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const {\n    data,\n    error,\n    isLoading\n  } = useGetQuestionsByParamsQuery({\n    difficultyValue,\n    amountValue\n  });\n\n  const handleAnswerOnQuestion = (currentIndex, answerStatus) => {\n    console.log(\"currentIndex\", currentIndex);\n    setCurrentQuestionIndex(++currentIndex);\n    const isCorrectAnswer = questionsData[--currentIndex].correct_answer === answerStatus.toString();\n    setResultQuestionsData(questionsData);\n    let currentIndexQuestion = { ...resultQuestionsData[currentIndex]\n    };\n    currentIndexQuestion.isCorrectAnswer = isCorrectAnswer;\n    const questionsDataWithQuestionWithAnswerStatus = [...resultQuestionsData];\n    questionsDataWithQuestionWithAnswerStatus[currentIndex] = currentIndexQuestion;\n    setResultQuestionsData(questionsDataWithQuestionWithAnswerStatus);\n  };\n\n  if ((data === null || data === void 0 ? void 0 : (_data$results = data.results) === null || _data$results === void 0 ? void 0 : _data$results.length) && !(questionsData === null || questionsData === void 0 ? void 0 : questionsData.length)) {\n    setQuestionsData(data === null || data === void 0 ? void 0 : data.results);\n    setResultQuestionsData(data === null || data === void 0 ? void 0 : data.results);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"...Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this), (questionsData === null || questionsData === void 0 ? void 0 : questionsData.length) === currentQuestionIndex && (questionsData === null || questionsData === void 0 ? void 0 : questionsData.length) && /*#__PURE__*/_jsxDEV(ResultScreen, {\n      results: resultQuestionsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 34\n    }, this), (questionsData === null || questionsData === void 0 ? void 0 : questionsData.length) && (questionsData === null || questionsData === void 0 ? void 0 : questionsData.length) !== currentQuestionIndex && /*#__PURE__*/_jsxDEV(Questionaire, {\n      currentQuestionIndex: currentQuestionIndex,\n      setCurrentQuestionIndex: handleAnswerOnQuestion,\n      data: questionsData[currentQuestionIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionaireScreen, \"4q0yT1rYlpRi/tFDqMR/aInbVRc=\", false, function () {\n  return [useGetQuestionsByParamsQuery];\n});\n\n_c = QuestionaireScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionaireScreen\");","map":{"version":3,"sources":["/Users/macbook/Desktop/bogdan_code/src/screens/QuestionaireScreen.js"],"names":["React","useState","useGetQuestionsByParamsQuery","ResultScreen","Questionaire","QuestionaireScreen","difficultyValue","amountValue","questionsData","setQuestionsData","resultQuestionsData","setResultQuestionsData","currentQuestionIndex","setCurrentQuestionIndex","data","error","isLoading","handleAnswerOnQuestion","currentIndex","answerStatus","console","log","isCorrectAnswer","correct_answer","toString","currentIndexQuestion","questionsDataWithQuestionWithAnswerStatus","results","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useGetQuestionsByParamsQuery } from \"../store/getQuestionsApi\";\nimport { ResultScreen, Questionaire } from \"./index\";\n\nexport const QuestionaireScreen = ({ difficultyValue, amountValue }) => {\n  const [questionsData, setQuestionsData] = useState([]);\n  const [resultQuestionsData, setResultQuestionsData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  const { data, error, isLoading } = useGetQuestionsByParamsQuery({\n    difficultyValue,\n    amountValue,\n  });\n\n  const handleAnswerOnQuestion = (currentIndex, answerStatus) => {\n    console.log(\"currentIndex\", currentIndex);\n    setCurrentQuestionIndex(++currentIndex);\n    const isCorrectAnswer =\n      questionsData[--currentIndex].correct_answer === answerStatus.toString();\n    setResultQuestionsData(questionsData);\n\n    let currentIndexQuestion = { ...resultQuestionsData[currentIndex] };\n    currentIndexQuestion.isCorrectAnswer = isCorrectAnswer;\n    const questionsDataWithQuestionWithAnswerStatus = [...resultQuestionsData];\n    questionsDataWithQuestionWithAnswerStatus[\n      currentIndex\n    ] = currentIndexQuestion;\n    setResultQuestionsData(questionsDataWithQuestionWithAnswerStatus);\n  };\n\n  if (data?.results?.length && !questionsData?.length) {\n    setQuestionsData(data?.results);\n    setResultQuestionsData(data?.results);\n  }\n\n  return (\n    <div>\n      {isLoading && <div>...Loading</div>}\n      {questionsData?.length === currentQuestionIndex &&\n        questionsData?.length && <ResultScreen results={resultQuestionsData} />}\n      {questionsData?.length &&\n        questionsData?.length !== currentQuestionIndex && (\n          <Questionaire\n            currentQuestionIndex={currentQuestionIndex}\n            setCurrentQuestionIndex={handleAnswerOnQuestion}\n            data={questionsData[currentQuestionIndex]}\n          />\n        )}\n      {error && <div>Error: {error}</div>}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}