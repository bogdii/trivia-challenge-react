{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/bogdan_code/src/screens/QuestionaireScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useGetQuestionsByParamsQuery } from \"../store/getQuestionsApi\";\nimport { ResultScreen, Questionaire } from \"./index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionaireScreen = ({\n  difficultyValue,\n  amountValue\n}) => {\n  _s();\n\n  var _data$results;\n\n  const [questionsData, setQuestionsData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const {\n    data,\n    error,\n    isLoading\n  } = useGetQuestionsByParamsQuery(difficultyValue, amountValue);\n  (data === null || data === void 0 ? void 0 : (_data$results = data.results) === null || _data$results === void 0 ? void 0 : _data$results.length) && !(questionsData === null || questionsData === void 0 ? void 0 : questionsData.length) && setQuestionsData(data === null || data === void 0 ? void 0 : data.results);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"...Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }, this), (questionsData === null || questionsData === void 0 ? void 0 : questionsData.length) === currentQuestionIndex && (questionsData === null || questionsData === void 0 ? void 0 : questionsData.length) && /*#__PURE__*/_jsxDEV(ResultScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 34\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionaireScreen, \"Vm+KXgErXMtgGHz+2nwgUoi7hZw=\", false, function () {\n  return [useGetQuestionsByParamsQuery];\n});\n\n_c = QuestionaireScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionaireScreen\");","map":{"version":3,"sources":["/Users/macbook/Desktop/bogdan_code/src/screens/QuestionaireScreen.js"],"names":["React","useState","useGetQuestionsByParamsQuery","ResultScreen","Questionaire","QuestionaireScreen","difficultyValue","amountValue","questionsData","setQuestionsData","currentQuestionIndex","setCurrentQuestionIndex","data","error","isLoading","results","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,4BAAT,QAA6C,0BAA7C;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,SAA3C;;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,CAAD,KAAsC;AAAA;;AAAA;;AACtE,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACS,oBAAD,EAAuBC,uBAAvB,IAAkDV,QAAQ,CAAC,CAAD,CAAhE;AAEA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA6BZ,4BAA4B,CAC7DI,eAD6D,EAE7DC,WAF6D,CAA/D;AAKA,GAAAK,IAAI,SAAJ,IAAAA,IAAI,WAAJ,6BAAAA,IAAI,CAAEG,OAAN,gEAAeC,MAAf,KACE,EAACR,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEQ,MAAhB,CADF,IAEEP,gBAAgB,CAACG,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEG,OAAP,CAFlB;AAGA,sBACE;AAAA,eACGD,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADhB,EAEG,CAAAN,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,MAAf,MAA0BN,oBAA1B,KACCF,aADD,aACCA,aADD,uBACCA,aAAa,CAAEQ,MADhB,kBAC0B,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAH7B,EAYGH,KAAK,iBAAI;AAAA,4BAAaA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAZZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA5BM;;GAAMR,kB;UAIwBH,4B;;;KAJxBG,kB","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useGetQuestionsByParamsQuery } from \"../store/getQuestionsApi\";\nimport { ResultScreen, Questionaire } from \"./index\";\n\nexport const QuestionaireScreen = ({ difficultyValue, amountValue }) => {\n  const [questionsData, setQuestionsData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  const { data, error, isLoading } = useGetQuestionsByParamsQuery(\n    difficultyValue,\n    amountValue\n  );\n\n  data?.results?.length &&\n    !questionsData?.length &&\n    setQuestionsData(data?.results);\n  return (\n    <div>\n      {isLoading && <div>...Loading</div>}\n      {questionsData?.length === currentQuestionIndex &&\n        questionsData?.length && <ResultScreen />}\n      {/* {questionsData?.length &&\n        questionsData?.length !== currentQuestionIndex && (\n          <Questionaire\n            currentQuestionIndex={currentQuestionIndex}\n            setCurrentQuestionIndex={setCurrentQuestionIndex}\n            data={questionsData[currentQuestionIndex]}\n          />\n        )} */}\n      {error && <div>Error: {error}</div>}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}